exit
page.header
page.headers
page.header
exit
response.body
response.inspect
response
response.header
response.headers
response.inspect
response["X-Powered-By"]
response["Server"]
response
exit
request.request_head(uri.path)
request
response.request_head
response
exit
link.text.strip
link.text
link.tet
exit
html.css('a')[0]["href"]
html.css('a')["href"]
html.css('a').count
html.css('a')
html
backlinks
exit
request.env["REMOTE_ADDR"]
request.remote_ip
request.ip_address
request.remote_ip
request
c
all_records
c
records = Resolv::DNS.new.getresources(host, Resolv::DNS::Resource::IN::const_get(type.upcase))[0].address
records = Resolv::DNS.new.getresources(host, Resolv::DNS::Resource::IN::const_get(type.upcase))[0].data
records = Resolv::DNS.new.getresources(host, Resolv::DNS::Resource::IN::const_get(type.upcase))[0]
records = Resolv::DNS.new.getresources(host, Resolv::DNS::Resource::IN::const_get(type.upcase))
Resolv::DNS.new.getresources(host, Resolv::DNS::Resource::IN::const_get(type.upcase))
    byebug
type.upcase
records
c
Resolv::DNS.new.getresources(host,Resolv::DNS::Resource::IN::const_get(type.upcase))
const_get
const_get(type.upcase)
Resolv::DNS.new.getresources(host,Resolv::DNS::Resource::IN::const_get(type.upcase))
Resolv::DNS.new
Resolv::DNS
Resolv
c
Resolv::DNS.new.getresources(host, Resolv::DNS::Resources::IN.const_get(type.upcase))
type
host
